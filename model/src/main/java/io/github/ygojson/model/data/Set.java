package io.github.ygojson.model.data;

import java.util.*;

import com.fasterxml.jackson.annotation.*;
import jakarta.validation.constraints.Pattern;

import io.github.ygojson.model.data.definition.SetInfo;
import io.github.ygojson.model.data.definition.localization.Region;
import io.github.ygojson.model.data.definition.localization.SetLocalizedData;
import io.github.ygojson.model.data.property.IdProperties;
import io.github.ygojson.model.data.property.LanguageProperties;
import io.github.ygojson.model.data.property.SetProperties;

/**
 * Model describing the properties of a Set (atomic).
 */
@JsonClassDescription(
	"""
		Describes the information for a set.

		This model contains the properties of the set."""
)
@JsonPropertyOrder(
	{
		IdProperties.SELF_ID,
		SetProperties.NAME,
		SetProperties.NAME_ALT,
		SetProperties.SET_CODE,
		SetProperties.REGION_CODES,
		SetProperties.TYPE,
		SetProperties.SERIES,
		LanguageProperties.LOCALIZED_DATA,
	}
)
public class Set {

	// container for set text related properties
	private SetInfo setInfo;
	private UUID id;
	private String type;
	private String series;
	private SetLocalizedData localizedData;

	/**
	 * Return the set-info as a whole.
	 * <br>
	 * Note: this method is not serialized as JSON,
	 * as each individual getter/setter has its own field.
	 *
	 * @return set-info as a model
	 */
	@JsonIgnore // using json ignore but add the methods for the annotations+
	public SetInfo getSetInfo() {
		return setInfo;
	}

	private Optional<SetInfo> getOptionalSetInfo() {
		return Optional.ofNullable(setInfo);
	}

	/**
	 * UUID (v5) for the set information (not the prints) generated by YGOJSON.
	 */
	@JsonPropertyDescription(
		"UUID (v5) for the Set (atomic) generated by YGOJSON."
	)
	@JsonProperty(value = IdProperties.SELF_ID, required = true)
	@JsonInclude(JsonInclude.Include.ALWAYS)
	public UUID getId() {
		return id;
	}

	/**
	 * Name of the set.
	 */
	@JsonPropertyDescription("Name of the set.")
	@JsonProperty(value = SetProperties.NAME)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public String getName() {
		return getOptionalSetInfo().map(SetInfo::getName).orElse(null);
	}

	/**
	 * Alternate name of the set.
	 */
	@JsonPropertyDescription("Alternate name of the set.")
	@JsonProperty(value = SetProperties.NAME_ALT)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public String getNameAlt() {
		return getOptionalSetInfo().map(SetInfo::getNameAlt).orElse(null);
	}

	/**
	 * Set code.
	 */
	@JsonPropertyDescription("Set code.")
	@JsonProperty(value = SetProperties.SET_CODE)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-zA-Z0-9]+")
	public String getSetCode() {
		return getOptionalSetInfo().map(SetInfo::getSetCode).orElse(null);
	}

	/**
	 * List of region codes for the set.
	 */
	@JsonPropertyDescription("List of region codes for the set.")
	@JsonProperty(value = SetProperties.REGION_CODES)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public List<Region> getRegionCodes() {
		return getOptionalSetInfo().map(SetInfo::getRegionCodes).orElse(null);
	}

	/**
	 * Type of the set (lower-case).
	 */
	@JsonPropertyDescription("Type of the set (lower-case).")
	@JsonProperty(value = SetProperties.TYPE)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-z-0-9]+")
	public String getType() {
		return type;
	}

	/**
	 * Series of the set (lower-case).
	 */
	@JsonPropertyDescription("Series of the set (lower-case).")
	@JsonProperty(value = SetProperties.SERIES)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-z-0-9]+")
	public String getSeries() {
		return series;
	}

	/**
	 * Localized data for the set.
	 */
	@JsonPropertyDescription(
		"""
			Describes translations and locale-specific data for a set.

			All translated properties match the name of the original property
			and any missing property indicates no translation for it."""
	)
	@JsonProperty(value = LanguageProperties.LOCALIZED_DATA)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public SetLocalizedData getLocalizedData() {
		return localizedData;
	}

	@JsonIgnore // required for the jsonschema generator to be sure that it is not serialized
	public void setSetInfo(SetInfo setInfo) {
		this.setInfo = setInfo;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public void setType(String type) {
		this.type = type;
	}

	public void setSeries(String series) {
		this.series = series;
	}

	public void setLocalizedData(SetLocalizedData localizedData) {
		this.localizedData = localizedData;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof Set set)) return false;
		return (
			Objects.equals(setInfo, set.setInfo) &&
			Objects.equals(id, set.id) &&
			Objects.equals(type, set.type) &&
			Objects.equals(series, set.series) &&
			Objects.equals(localizedData, set.localizedData)
		);
	}

	@Override
	public int hashCode() {
		return Objects.hash(setInfo, id, type, series, localizedData);
	}

	@Override
	public String toString() {
		return new StringJoiner(", ", Set.class.getSimpleName() + "[", "]")
			.add("setInfo=" + setInfo)
			.add("id=" + id)
			.add("type='" + type + "'")
			.add("series='" + series + "'")
			.add("localizedData=" + localizedData)
			.toString();
	}
}
