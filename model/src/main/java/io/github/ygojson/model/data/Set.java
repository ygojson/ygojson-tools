package io.github.ygojson.model.data;

import java.util.Map;
import java.util.UUID;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.experimental.SuperBuilder;

import io.github.ygojson.model.data.definitions.SetLocalizedData;

/**
 * Model describing the properties of a Set (atomic).
 */
@JsonClassDescription(
	"""
		Describes the information for a set.

		This model contains the properties of the set."""
)
@JsonPropertyOrder(
	{
		Set.ID_PROPERTY,
		Set.PREFIX_PROPERTY,
		Set.NAME_PROPERTY,
		Set.TYPE_PROPERTY,
		Set.SERIES_PROPERTY,
		Set.LOCALIZED_DATA_PROPERTY,
	}
)
@Getter
@SuperBuilder(setterPrefix = "with", toBuilder = true)
@JsonPOJOBuilder
public class Set {

	public static final String ID_PROPERTY = "id";
	public static final String PREFIX_PROPERTY = "prefix";
	public static final String NAME_PROPERTY = "name";
	public static final String TYPE_PROPERTY = "type";
	public static final String SERIES_PROPERTY = "series";
	public static final String LOCALIZED_DATA_PROPERTY = "localizedData";

	/**
	 * UUID (v5) for the set information (not the prints) generated by YGOJSON.
	 */
	@JsonPropertyDescription(
		"UUID (v5) for the Set (atomic) generated by YGOJSON."
	)
	@NotNull @JsonProperty(value = ID_PROPERTY, required = true)
	@JsonInclude(JsonInclude.Include.ALWAYS)
	private UUID id;

	/**
	 * Prefix of the set in English (if available).
	 */
	@JsonPropertyDescription("Prefix of the set in English (if available).")
	@JsonProperty(value = PREFIX_PROPERTY)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-zA-Z0-9]+-[a-zA-Z0-9]+")
	private String prefix;

	/**
	 * Name of the set in English (if available).
	 */
	@JsonPropertyDescription("Name of the set in English (if available).")
	@JsonProperty(value = NAME_PROPERTY)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	private String name;

	/**
	 * Type of the set (lower-case).
	 */
	@JsonPropertyDescription("Type of the set (lower-case).")
	@JsonProperty(value = TYPE_PROPERTY)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-z-0-9]+")
	private String type;

	/**
	 * Series of the set (lower-case).
	 */
	@JsonPropertyDescription("Series of the set (lower-case).")
	@JsonProperty(value = SERIES_PROPERTY)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	@Pattern(regexp = "[a-z-0-9]+")
	private String series;

	/**
	 * Localized data for the set.
	 */
	@JsonPropertyDescription("Localized data for the set.")
	@JsonProperty(value = Set.LOCALIZED_DATA_PROPERTY)
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	private Map<String, SetLocalizedData> localizedData;
}
